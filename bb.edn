{:deps {metosin/malli {:mvn/version "0.13.0"},
        org.clojure/tools.cli {:mvn/version "1.0.219"}},
 :paths ["src" "resources"],
 :tasks
 {:enter {},
  :init (do (def os (current-os/current-os))
            (def cli-options (cli-opts/parse *command-line-args*))
            (cli-opts/do-opts cli-options)
            (def sandbox? (boolean (get-in cli-options [:options :sandbox])))
            (println (format "Configuration: os=%s%s"
                             os
                             (if sandbox? ", sandbox activated" "")))
            (when (:errors cli-options)
              (apply println "invalid options: " (:errors cli-options))
              (System/exit -1))
            (def cfg-item
              (-> (get-in cli-options [:options :cfg-item])
                  keyword))
            (defn execute-task [task-fn] (task-fn os cfg-item sandbox?))),
  :requires ([cli-opts :as cli-opts]
             [ncmds]
             [current-os]
             [tasks.check :as check]
             [tasks.clean :as clean]
             [tasks.format-files :as format-files]
             [tasks.init :as init]
             [tasks.install :as install]
             [tasks.nrepl :as nrepl]
             [tasks.save :as save]
             [tasks.update-items :as update-items]
             [tasks.version :as version]),
  cfg-item-version
  {:doc "Display current version of configuration items.",
   :task (let [cmds (version/nversion os)]
           (if sandbox? (ncmds/print cmds) (ncmds/execute-cmds cmds)))},
  check {:doc "Ask all tooling to check its consistency",
         :task (let [cmds (check/ncheck os)]
                 (if sandbox? (ncmds/print cmds) (ncmds/execute-cmds cmds)))},
  clean {:doc "Clean the setup", :task (execute-task clean/clean)},
  format {:doc "Format all project files",
          :task (if sandbox?
                  (println (ncmds/cmd-to-str format-files/cmd))
                  (format-files/format-files))},
  init {:doc "Init the setup - to be run only once",
        :task (execute-task init/init)},
  install {:doc "Use to install toolings",
           :task (execute-task install/install)},
  nrepl {:doc "Launch the nrepl", :task (nrepl/nrepl)},
  save {:doc "Save the current configuration", :task (execute-task save/save)},
  update {:doc "Regularly update you environment",
          :task (execute-task update-items/update-items)}}}
